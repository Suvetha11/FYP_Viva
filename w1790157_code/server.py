# -*- coding: utf-8 -*-
"""Server.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14rMWS56ok8S70E_6Us-h2ToaH_4DJcND
"""

!pip install flask_ngrok
!pip install pyngrok==4.1.1
!ngrok authtoken 2PGvVkN3XdNRh2tpOzBVNVMjQsu_5VehThVJUCLiV94SQaquK

# from flask import Flask
# from flask_ngrok import run_with_ngrok

# app = Flask(__name__)
# run_with_ngrok(app)

# @app.route("/")
# def home():
#   return "<h1>Welcome to CID</h1>"

# app.run()

!pip install transformers
!pip install sentencepiece

from google.colab import drive
drive.mount('/content/drive')

pip install  flask-cors

from transformers import T5Tokenizer, T5ForConditionalGeneration, AdamW
import pandas as pd
from torch.utils.data import DataLoader, Dataset
from sklearn.model_selection import train_test_split
from flask import Flask, request, render_template
from flask.templating import render_template
from flask import Flask
from flask_ngrok import run_with_ngrok
import numpy as np
import torch
from flask import jsonify
from flask_cors import CORS

template_folder = '/content/drive/MyDrive/T5-b10-model18/template'
static_folder = '/content/drive/MyDrive/T5-b10-model18/static'
app = Flask(__name__,template_folder=template_folder,static_folder=static_folder)
CORS(app)
run_with_ngrok(app)

load_model = T5ForConditionalGeneration.from_pretrained('/content/drive/MyDrive/T5-b10-model16')
tokenizer = T5Tokenizer.from_pretrained('t5-small')

# @app.route("/")
# @app.route("/index")
# def home():
#   return render_template('index.html')

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/process_voice_input',methods=['POST'])
def process_voice_input():    

    input_text = request.form['input']
    input_ids = tokenizer.encode(input_text, return_tensors="pt")
    outputs = load_model.generate(input_ids, max_new_tokens=100000)
    output_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
    print(output_text)

    # return render_template('index.html', output='Code :{}'.format(output_text))
    return output_text

@app.route('/process',methods=['POST'])
def process_voice_input_json():    

    input_text = request.json['input']
    input_ids = tokenizer.encode(input_text, return_tensors="pt")
    outputs = load_model.generate(input_ids, max_new_tokens=100000)
    output_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
    print(output_text)

    # return render_template('index.html', output='Code :{}'.format(output_text))
    return jsonify(message=output_text)

app.run()







